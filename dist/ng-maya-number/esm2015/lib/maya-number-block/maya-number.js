/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const MayanDigits = {
    Zero: '@',
    One: '.',
    Five: '-',
};
/**
 * Getter for sequences of simple numbers
 * @type {?}
 */
const fiveSequence = (nr = 1) => {
    return new Array(nr).fill(MayanDigits.Five);
};
const ɵ0 = fiveSequence;
/** @type {?} */
const oneSequence = (nr = 1) => {
    return new Array(nr).fill(MayanDigits.One);
};
const ɵ1 = oneSequence;
/**
 * @param {?} number
 * @return {?}
 */
function getRow(number) {
    if (!number) {
        return [[MayanDigits.Zero]];
    }
    return [
        oneSequence(Math.floor(number % 5)),
        fiveSequence(Math.floor(number / 5))
    ];
}
/**
 * Code by https://github.com/gabber7
 * @type {?}
 */
const logBase = (n, base) => Math.log(n) / Math.log(base);
const ɵ2 = logBase;
/**
 * @param {?} number
 * @return {?}
 */
function getMayanNumber(number) {
    if (number === NaN) {
        return;
    }
    if (number === 0) {
        return [[MayanDigits.Zero]];
    }
    /** @type {?} */
    const log = Math.floor(logBase(number, 20));
    /** @type {?} */
    const collect = [];
    for (let i = log; i >= 0; i--) {
        /** @type {?} */
        const n = Math.pow(20, i);
        /** @type {?} */
        const tmp = Math.floor(number / n);
        number = number - tmp * n;
        collect.push(getRow(tmp));
    }
    return collect.filter(x => !!x.length);
}
export { getMayanNumber, MayanDigits };
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF5YS1udW1iZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1tYXlhLW51bWJlci8iLCJzb3VyY2VzIjpbImxpYi9tYXlhLW51bWJlci1ibG9jay9tYXlhLW51bWJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7SUFDRSxNQUFPLEdBQUc7SUFDVixLQUFNLEdBQUc7SUFDVCxNQUFPLEdBQUc7Ozs7OztNQVFOLFlBQVksR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQVksRUFBRTtJQUN4QyxPQUFPLElBQUksS0FBSyxDQUFTLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEQsQ0FBQzs7O01BRUssV0FBVyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBWSxFQUFFO0lBQ3ZDLE9BQU8sSUFBSSxLQUFLLENBQVMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNyRCxDQUFDOzs7Ozs7QUFFRCxTQUFTLE1BQU0sQ0FBQyxNQUFjO0lBQzVCLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUM3QjtJQUNELE9BQU87UUFDTCxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3JDLENBQUM7QUFDSixDQUFDOzs7OztNQU1LLE9BQU8sR0FBRyxDQUFDLENBQVMsRUFBRSxJQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7Ozs7OztBQUV6RSxTQUFTLGNBQWMsQ0FBQyxNQUFjO0lBQ3BDLElBQUksTUFBTSxLQUFLLEdBQUcsRUFBRTtRQUNsQixPQUFPO0tBQ1I7SUFDRCxJQUFJLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDaEIsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDN0I7O1VBQ0ssR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQzs7VUFDckMsT0FBTyxHQUFHLEVBQUU7SUFDbEIsS0FBSyxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTs7Y0FDdkIsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQzs7Y0FDbkIsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNsQyxNQUFNLEdBQUcsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDMUIsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUMzQjtJQUNELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVELE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJlbnVtIE1heWFuRGlnaXRzIHtcbiAgWmVybyA9ICdAJyxcbiAgT25lID0gJy4nLFxuICBGaXZlID0gJy0nXG59XG5cbnR5cGUgTWF5YW5EaWdpdCA9ICdAJyB8ICcuJyB8ICctJztcblxuLyoqXG4gKiBHZXR0ZXIgZm9yIHNlcXVlbmNlcyBvZiBzaW1wbGUgbnVtYmVyc1xuICovXG5jb25zdCBmaXZlU2VxdWVuY2UgPSAobnIgPSAxKTogc3RyaW5nW10gPT4ge1xuICByZXR1cm4gbmV3IEFycmF5PHN0cmluZz4obnIpLmZpbGwoTWF5YW5EaWdpdHMuRml2ZSk7XG59O1xuXG5jb25zdCBvbmVTZXF1ZW5jZSA9IChuciA9IDEpOiBzdHJpbmdbXSA9PiB7XG4gIHJldHVybiBuZXcgQXJyYXk8c3RyaW5nPihucikuZmlsbChNYXlhbkRpZ2l0cy5PbmUpO1xufTtcblxuZnVuY3Rpb24gZ2V0Um93KG51bWJlcjogbnVtYmVyKSB7XG4gIGlmICghbnVtYmVyKSB7XG4gICAgcmV0dXJuIFtbTWF5YW5EaWdpdHMuWmVyb11dO1xuICB9XG4gIHJldHVybiBbXG4gICAgb25lU2VxdWVuY2UoTWF0aC5mbG9vcihudW1iZXIgJSA1KSksXG4gICAgZml2ZVNlcXVlbmNlKE1hdGguZmxvb3IobnVtYmVyIC8gNSkpXG4gIF07XG59XG5cbi8qKlxuICogQ29kZSBieSBodHRwczovL2dpdGh1Yi5jb20vZ2FiYmVyN1xuICovXG5cbmNvbnN0IGxvZ0Jhc2UgPSAobjogbnVtYmVyLCBiYXNlOiBudW1iZXIpID0+IE1hdGgubG9nKG4pIC8gTWF0aC5sb2coYmFzZSk7XG5cbmZ1bmN0aW9uIGdldE1heWFuTnVtYmVyKG51bWJlcjogbnVtYmVyKTogYW55W10ge1xuICBpZiAobnVtYmVyID09PSBOYU4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgIHJldHVybiBbW01heWFuRGlnaXRzLlplcm9dXTtcbiAgfVxuICBjb25zdCBsb2cgPSBNYXRoLmZsb29yKGxvZ0Jhc2UobnVtYmVyLCAyMCkpO1xuICBjb25zdCBjb2xsZWN0ID0gW107XG4gIGZvciAobGV0IGkgPSBsb2c7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgbiA9IE1hdGgucG93KDIwLCBpKTtcbiAgICBjb25zdCB0bXAgPSBNYXRoLmZsb29yKG51bWJlciAvIG4pO1xuICAgIG51bWJlciA9IG51bWJlciAtIHRtcCAqIG47XG4gICAgY29sbGVjdC5wdXNoKGdldFJvdyh0bXApKTtcbiAgfVxuICByZXR1cm4gY29sbGVjdC5maWx0ZXIoeCA9PiAhIXgubGVuZ3RoKTtcbn1cblxuZXhwb3J0IHsgZ2V0TWF5YW5OdW1iZXIsIE1heWFuRGlnaXRzLCBNYXlhbkRpZ2l0IH07XG4iXX0=